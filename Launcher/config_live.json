{
  // this configuration file works by first loading all top-level
  // configuration items and then will load the specified environment
  // on top, this provides a layering affect. environment names can be
  // anything, and just require definition in this file. There's
  // two predefined environments, 'backtesting' and 'live', feel free
  // to add more!

  "environment": "live-metatrader", //  "backtesting", live-metatrader

  // algorithm class selector
  "algorithm-type-name": "AACustomDataBitStamp",

  // Algorithm language selector - options CSharp, Python
  "algorithm-language": "CSharp",

  //Physical DLL location
  "algorithm-location": "QuantConnect.Algorithm.CSharp.dll",
  //"algorithm-location": "../../../Algorithm.Python/BasicTemplateFrameworkAlgorithm.py",

  //Research notebook
  //"composer-dll-directory": ".",

  // engine
  "data-folder": "../../../Data/",

  // debugging configuration - options for debugging-method LocalCmdLine, VisualStudio, Debugpy, PyCharm
  "debugging": false,
  "debugging-method": "LocalCmdline",

  // location of a python virtual env to use libraries from
  //"python-venv": "/venv",

  // handlers
  "log-handler": "QuantConnect.Logging.CompositeLogHandler",
  "messaging-handler": "QuantConnect.Messaging.Messaging",
  "job-queue-handler": "QuantConnect.Queues.JobQueue",
  "api-handler": "QuantConnect.Api.Api",
  "map-file-provider": "QuantConnect.Data.Auxiliary.LocalDiskMapFileProvider",
  "factor-file-provider": "QuantConnect.Data.Auxiliary.LocalDiskFactorFileProvider",
  "data-provider": "QuantConnect.Lean.Engine.DataFeeds.DefaultDataProvider",
  "data-channel-provider": "DataChannelProvider",
  "object-store": "QuantConnect.Lean.Engine.Storage.LocalObjectStore",
  "data-aggregator": "QuantConnect.Lean.Engine.DataFeeds.AggregationManager",

  // limits on number of symbols to allow
  "symbol-minute-limit": 10000,
  "symbol-second-limit": 10000,
  "symbol-tick-limit": 10000,

  // log missing data files, useful for debugging
  "show-missing-data-logs": false,

  // For live trading during warmup we limit the amount of historical data fetched from the history provider and expect the data to be on disk for older data
  "maximum-warmup-history-days-look-back": 5,

  // limits the amount of data points per chart series. Applies only for backtesting
  "maximum-data-points-per-chart-series": 1000000,
  "maximum-chart-series": 30,

  // if one uses true in following token, market hours will remain open all hours and all days.
  // if one uses false will make lean operate only during regular market hours.
  "force-exchange-always-open": false,

  // save list of transactions to the specified csv file
  "transaction-log": "",

  // Prefix for Windows reserved filenames
  "reserved-words-prefix": "@",

  // To get your api access token go to quantconnect.com/account
  "job-user-id": "0",
  "api-access-token": "",
  "job-organization-id": "",

  // live data configuration
  "live-data-url": "ws://www.quantconnect.com/api/v2/live/data/",
  "live-data-port": 8020,

  // live portfolio state
  "live-cash-balance": "",
  "live-holdings": "[]",

  // parameters to set in the algorithm (the below are just samples)
  "parameters": {
    // Intrinio account user and password
    "intrinio-username": "",
    "intrinio-password": "",

    "ema-fast": 10,
    "ema-slow": 20
  },

  // specify supported languages when running regression tests
  "regression-test-languages": [ "CSharp", "Python" ],

  // Additional paths to include in python for import resolution
  "python-additional-paths": [],


  "environments": {


    "live-paper": {
      "live-mode": true,
      "live-mode-brokerage": "PaperBrokerage",
      "data-queue-handler": [ "QuantConnect.Lean.Engine.DataFeeds.Queues.FakeDataQueue" ],
      "setup-handler": "QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler",
      "result-handler": "QuantConnect.Lean.Engine.Results.LiveTradingResultHandler",
      "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed",
      "real-time-handler": "QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler",
      "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BacktestingTransactionHandler"
    },
    "live-metatrader": {
      "live-mode": true,
      "live-mode-brokerage": "MetaTraderBrokerage",
      "data-queue-handler": [ "MetaTraderDataProvider" ],
      "setup-handler": "QuantConnect.Lean.Engine.Setup.BrokerageSetupHandler",
      "result-handler": "QuantConnect.Lean.Engine.Results.LiveTradingResultHandler",
      "data-feed-handler": "QuantConnect.Lean.Engine.DataFeeds.LiveTradingDataFeed",
      "real-time-handler": "QuantConnect.Lean.Engine.RealTime.LiveTradingRealTimeHandler",
      "transaction-handler": "QuantConnect.Lean.Engine.TransactionHandlers.BrokerageTransactionHandler",
      "history-provider": [ "BrokerageHistoryProvider", "SubscriptionDataReaderHistoryProvider" ]
    }
  }
}
