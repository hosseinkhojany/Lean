// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© KINSKI

//@version=5
indicator('KINSKI Flexible Multi MA (COVWMA, DEMA, EMA, EHMA, FRAMA, HMA, KAMA, RMA, SMA, TEMA, SMMA (RMA), VIDYA, VWMA, WMA)', shorttitle='Flexible Multi MA', overlay=true)



//************  Globals
color val_1_color_default = #FFD900
color val_2_color_default = #006EFF
color val_3_color_default = #FF0004
color val_4_color_default = #00FF11
color val_5_color_default = #9900FF
color val_6_color_default = #FF7300
color val_7_color_default = #FF00D4
color val_8_color_default = #B2B5BE
color val_9_color_default = #82FFC9
color val_10_color_default = #00EEFF



//********** Functions
// scale to the range of [min, max]
_funcMinMax(X, p, min, max) =>
    hi = ta.highest(X, p)
    lo = ta.lowest(X, p)
    (max - min) * (X - lo) / (hi - lo) + min

_funcLineStyle(_type) =>
    switch _type
        "Circles" => plot.style_circles
        "Stepline" => plot.style_stepline
        "Line With Breaks" => plot.style_linebr
        "Step Line With Diamonds" => plot.style_stepline_diamond
        =>
            plot.style_line

_funcSetFinalVal(_tpl, _type_1, _type_2, _type_3, _type_4, _type_5, _type_6, _type_7, _maTypeDefault, _length_1, _length_2, _length_3, _length_4, _length_5, _length_6, _length_7, _maLengthDefault) =>
    string _tmpMaType = _maTypeDefault
    int _tmpMaLength = _maLengthDefault
    if _tpl == 'EMA 20-50-100-200'
        _tmpMaType := _type_1
        _tmpMaLength := _length_1
        _tmpMaLength
    else if _tpl == 'SMA 5-10-20-50-200'
        _tmpMaType := _type_2
        _tmpMaLength := _length_2
        _tmpMaLength
    else if _tpl == 'EMA Fibonacci 21-55-89-144-233'
        _tmpMaType := _type_3
        _tmpMaLength := _length_3
        _tmpMaLength
    else if _tpl == 'EMA 20-50-100-200 / SMA 100-200'
        _tmpMaType := _type_4
        _tmpMaLength := _length_4
        _tmpMaLength
    else if _tpl == 'EMA Golden/Death Cross 50-200'
        _tmpMaType := _type_5
        _tmpMaLength := _length_5
        _tmpMaLength
    else if _tpl == 'SMA Golden/Death Cross 50-200'
        _tmpMaType := _type_6
        _tmpMaLength := _length_6
        _tmpMaLength
    else if _tpl == 'HMA Cross 21-34'
        _tmpMaType := _type_7
        _tmpMaLength := _length_7
        _tmpMaLength
    [_tmpMaType, _tmpMaLength]

// Chande Momentum Oscillator
_funcCMO(_src, _period) =>
    tmpMomentum = ta.change(_src)
    tmpSummaryUp = math.sum(math.max(tmpMomentum, 0), _period)
    tmpSummaryDown = math.sum(-math.min(tmpMomentum, 0), _period)
    math.abs((tmpSummaryUp - tmpSummaryDown) / (tmpSummaryUp + tmpSummaryDown))

// Triple EMA (TEMA)
_funcTEMA(_src, _period) =>
    ema1 = ta.ema(_src, _period)
    ema2 = ta.ema(ema1, _period)
    ema3 = ta.ema(ema2, _period)
    3 * (ema1 - ema2) + ema3

// Double Expotential Moving Average (DEMA)
_funcDEMA(_src, _period) =>
    2 * ta.ema(_src, _period) - ta.ema(ta.ema(_src, _period), _period)

// Exponential Hull Moving Average (EHMA)
_funcEHMA(_src, _period) =>
    tmpVal = math.max(2, _period)
    ta.ema(2 * ta.ema(_src, tmpVal / 2) - ta.ema(_src, tmpVal), math.round(math.sqrt(tmpVal)))

// Kaufman's Adaptive Moving Average (KAMA)
_funcKAMA(_src, _period) =>
    tmpVal = 0.0
    sum_1 = math.sum(math.abs(_src - _src[1]), _period)
    sum_2 = math.sum(math.abs(_src - _src[1]), _period)
    tmpVal := nz(tmpVal[1]) + math.pow((sum_1 != 0 ? math.abs(_src - _src[_period]) / sum_2 : 0) * (0.666 - 0.0645) + 0.0645, 2) * (_src - nz(tmpVal[1]))
    tmpVal

// Variable Index Dynamic Average (VIDYA)
_funcVIDYA(_src, _period) =>
    cmo = _funcCMO(_src, _period)
    alpha = 2 / (_period + 1)
    vidya = 0.0
    vidya := _src * alpha * cmo + nz(vidya[1]) * (1 - alpha * cmo)
    vidya

// Coefficient of Variation Weighted Moving Average (COVWMA)
_funcCOVWMA(_src, _period) =>
    _coefficientOfVariation = ta.stdev(_src, _period) / ta.sma(_src, _period)
    _cw = _src * _coefficientOfVariation
    math.sum(_cw, _period) / math.sum(_coefficientOfVariation, _period)

// Fractal Adaptive Moving Average (FRAMA)
_funcFRAMA(_src, _period) =>
    _coefficient = -4.6
    _n3 = (ta.highest(high, _period) - ta.lowest(low, _period)) / _period
    _hd2 = ta.highest(high, _period / 2)
    _ld2 = ta.lowest(low, _period / 2)
    _n2 = (_hd2 - _ld2) / (_period / 2)
    _n1 = (_hd2[_period / 2] - _ld2[_period / 2]) / (_period / 2)
    _dim = _n1 > 0 and _n2 > 0 and _n3 > 0 ? (math.log(_n1 + _n2) - math.log(_n3)) / math.log(2) : 0
    _alpha = math.exp(_coefficient * (_dim - 1))
    _sc = _alpha < 0.01 ? 0.01 : _alpha > 1 ? 1 : _alpha
    ta.cum(1) <= 2 * _period ? _src : _src * _sc + nz(_src[1]) * (1 - _sc)

// calculate the moving average with the transferred settings
_funcCalcMA(_type, _src, _timeframe, _period) =>
    float ma = switch _type
        "COVWMA" => _funcCOVWMA(_src, _period)
        "DEMA" => _funcDEMA(_src, _period)
        "EMA" => ta.ema(_src, _period)
        "EHMA" => _funcEHMA(_src, _period)
        "HMA" => ta.hma(_src, _period)
        "KAMA" => _funcKAMA(_src, _period)
        "SMA" => ta.sma(_src, _period)
        "SMMA (RMA)" => ta.rma(_src, _period)
        "TEMA" => _funcTEMA(_src, _period)
        "FRAMA" => _funcFRAMA(_src, _period)
        "VWMA" => ta.vwma(_src, _period)
        "VIDYA" => _funcVIDYA(_src, _period)
        "WMA" => ta.wma(_src, _period)
        =>
            float(na)
    request.security(syminfo.tickerid, _timeframe, ma)


//********** Templates: settings

//----- EMA 20-50-100-200
string tpl_type1_1_MaType = 'EMA'
int tpl_type1_1_MaLength = 20
string tpl_type1_2_MaType = 'EMA'
int tpl_type1_2_MaLength = 50
string tpl_type1_3_MaType = 'EMA'
int tpl_type1_3_MaLength = 100
string tpl_type1_4_MaType = 'EMA'
int tpl_type1_4_MaLength = 200
string tpl_type1_5_MaType = 'DISABLED'
int tpl_type1_5_MaLength = 1
string tpl_type1_6_MaType = 'DISABLED'
int tpl_type1_6_MaLength = 1
string tpl_type1_7_MaType = 'DISABLED'
int tpl_type1_7_MaLength = 1
string tpl_type1_8_MaType = 'DISABLED'
int tpl_type1_8_MaLength = 1
string tpl_type1_9_MaType = 'DISABLED'
int tpl_type1_9_MaLength = 1
string tpl_type1_10_MaType = 'DISABLED'
int tpl_type1_10_MaLength = 1


//----- SMA 5-10-20-50-200
string tpl_type2_1_MaType = 'SMA'
int tpl_type2_1_MaLength = 5
string tpl_type2_2_MaType = 'SMA'
int tpl_type2_2_MaLength = 10
string tpl_type2_3_MaType = 'SMA'
int tpl_type2_3_MaLength = 20
string tpl_type2_4_MaType = 'SMA'
int tpl_type2_4_MaLength = 50
string tpl_type2_5_MaType = 'SMA'
int tpl_type2_5_MaLength = 200
string tpl_type2_6_MaType = 'DISABLED'
int tpl_type2_6_MaLength = 1
string tpl_type2_7_MaType = 'DISABLED'
int tpl_type2_7_MaLength = 1
string tpl_type2_8_MaType = 'DISABLED'
int tpl_type2_8_MaLength = 1
string tpl_type2_9_MaType = 'DISABLED'
int tpl_type2_9_MaLength = 1
string tpl_type2_10_MaType = 'DISABLED'
int tpl_type2_10_MaLength = 1


//----- EMA Fibonacci 21-55-89-144-233
// Fibonacci Sequences
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610
string tpl_type3_1_MaType = 'EMA'
int tpl_type3_1_MaLength = 21
string tpl_type3_2_MaType = 'EMA'
int tpl_type3_2_MaLength = 55
string tpl_type3_3_MaType = 'EMA'
int tpl_type3_3_MaLength = 89
string tpl_type3_4_MaType = 'EMA'
int tpl_type3_4_MaLength = 144
string tpl_type3_5_MaType = 'EMA'
int tpl_type3_5_MaLength = 233
string tpl_type3_6_MaType = 'DISABLED'
int tpl_type3_6_MaLength = 1
string tpl_type3_7_MaType = 'DISABLED'
int tpl_type3_7_MaLength = 1
string tpl_type3_8_MaType = 'DISABLED'
int tpl_type3_8_MaLength = 1
string tpl_type3_9_MaType = 'DISABLED'
int tpl_type3_9_MaLength = 1
string tpl_type3_10_MaType = 'DISABLED'
int tpl_type3_10_MaLength = 1


//----- EMA 20-50-100-200 / SMA 100-200
string tpl_type4_1_MaType = 'EMA'
int tpl_type4_1_MaLength = 20
string tpl_type4_2_MaType = 'EMA'
int tpl_type4_2_MaLength = 50
string tpl_type4_3_MaType = 'EMA'
int tpl_type4_3_MaLength = 100
string tpl_type4_4_MaType = 'EMA'
int tpl_type4_4_MaLength = 200
string tpl_type4_5_MaType = 'SMA'
int tpl_type4_5_MaLength = 100
string tpl_type4_6_MaType = 'SMA'
int tpl_type4_6_MaLength = 100
string tpl_type4_7_MaType = 'DISABLED'
int tpl_type4_7_MaLength = 1
string tpl_type4_8_MaType = 'DISABLED'
int tpl_type4_8_MaLength = 1
string tpl_type4_9_MaType = 'DISABLED'
int tpl_type4_9_MaLength = 1
string tpl_type4_10_MaType = 'DISABLED'
int tpl_type4_10_MaLength = 1


//----- EMA Golden/Death Cross 50-200
string tpl_type5_1_MaType = 'EMA'
int tpl_type5_1_MaLength = 50
string tpl_type5_2_MaType = 'EMA'
int tpl_type5_2_MaLength = 200
string tpl_type5_3_MaType = 'DISABLED'
int tpl_type5_3_MaLength = 1
string tpl_type5_4_MaType = 'DISABLED'
int tpl_type5_4_MaLength = 1
string tpl_type5_5_MaType = 'DISABLED'
int tpl_type5_5_MaLength = 1
string tpl_type5_6_MaType = 'DISABLED'
int tpl_type5_6_MaLength = 1
string tpl_type5_7_MaType = 'DISABLED'
int tpl_type5_7_MaLength = 1
string tpl_type5_8_MaType = 'DISABLED'
int tpl_type5_8_MaLength = 1
string tpl_type5_9_MaType = 'DISABLED'
int tpl_type5_9_MaLength = 1
string tpl_type5_10_MaType = 'DISABLED'
int tpl_type5_10_MaLength = 1


//----- SMA Golden/Death Cross 50-200
string tpl_type6_1_MaType = 'SMA'
int tpl_type6_1_MaLength = 50
string tpl_type6_2_MaType = 'SMA'
int tpl_type6_2_MaLength = 200
string tpl_type6_3_MaType = 'DISABLED'
int tpl_type6_3_MaLength = 1
string tpl_type6_4_MaType = 'DISABLED'
int tpl_type6_4_MaLength = 1
string tpl_type6_5_MaType = 'DISABLED'
int tpl_type6_5_MaLength = 1
string tpl_type6_6_MaType = 'DISABLED'
int tpl_type6_6_MaLength = 1
string tpl_type6_7_MaType = 'DISABLED'
int tpl_type6_7_MaLength = 1
string tpl_type6_8_MaType = 'DISABLED'
int tpl_type6_8_MaLength = 1
string tpl_type6_9_MaType = 'DISABLED'
int tpl_type6_9_MaLength = 1
string tpl_type6_10_MaType = 'DISABLED'
int tpl_type6_10_MaLength = 1


//----- HMA Cross 21-34
string tpl_type7_1_MaType = 'HMA'
int tpl_type7_1_MaLength = 21
string tpl_type7_2_MaType = 'HMA'
int tpl_type7_2_MaLength = 34
string tpl_type7_3_MaType = 'DISABLED'
int tpl_type7_3_MaLength = 1
string tpl_type7_4_MaType = 'DISABLED'
int tpl_type7_4_MaLength = 1
string tpl_type7_5_MaType = 'DISABLED'
int tpl_type7_5_MaLength = 1
string tpl_type7_6_MaType = 'DISABLED'
int tpl_type7_6_MaLength = 1
string tpl_type7_7_MaType = 'DISABLED'
int tpl_type7_7_MaLength = 1
string tpl_type7_8_MaType = 'DISABLED'
int tpl_type7_8_MaLength = 1
string tpl_type7_9_MaType = 'DISABLED'
int tpl_type7_9_MaLength = 1
string tpl_type7_10_MaType = 'DISABLED'
int tpl_type7_10_MaLength = 1



//********** Inputs

// Global Settings
string inputTemplate = input.string(title='Template', group='Settings', defval='DISABLED', options=['DISABLED', 'EMA 20-50-100-200', 'EMA Fibonacci 21-55-89-144-233', 'EMA 20-50-100-200 / SMA 100-200', 'EMA Golden/Death Cross 50-200', 'SMA Golden/Death Cross 50-200', 'SMA 5-10-20-50-200', 'HMA Cross 21-34'])

// Field 1
input_1_Timeframe = input.timeframe("", "Resolution:", group="Field 1")
input_1_Source = input(title='Source', group='Field 1', defval=close)
string input_1_MaType = input.string(title='Type', group='Field 1', defval='EMA', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_1_MaLength = input.int(title='Length', group='Field 1', minval=1, maxval=1000, defval=20)
color input_1_color = input(title='Style: Color', group='Field 1', defval=val_1_color_default)
int input_1_LineWidth = input.int(title='Style: Size', group='Field 1', minval=1, maxval=4, defval=2, step=1)
int input_1_LineTransparency = input.int(title='Style: Transparency', group='Field 1', minval=0, maxval=100, defval=0, step=5)
string input_1_LineStyle = input.string(title='Style: Type', group='Field 1', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 2
input_2_Timeframe = input.timeframe("", "Resolution:", group="Field 2")
input_2_Source = input(title='Source', group='Field 2', defval=close)
string input_2_MaType = input.string(title='Type', group='Field 2', defval='EMA', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_2_MaLength = input.int(title='Length', group='Field 2', minval=1, maxval=1000, defval=50)
color input_2_color = input(title='Style: Color', group='Field 2', defval=val_2_color_default)
int input_2_LineWidth = input.int(title='Style: Size', group='Field 2', minval=1, maxval=4, defval=2, step=1)
int input_2_LineTransparency = input.int(title='Style: Transparency', group='Field 2', minval=0, maxval=100, defval=0, step=5)
string input_2_LineStyle = input.string(title='Style: Type', group='Field 2', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 3
input_3_Timeframe = input.timeframe("", "Resolution:", group="Field 3")
input_3_Source = input(title='Source', group='Field 3', defval=close)
string input_3_MaType = input.string(title='Type', group='Field 3', defval='EMA', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
input_3_MaLength = input.int(title='Length', group='Field 3', minval=1, maxval=1000, defval=100)
color input_3_color = input(title='Style: Color', group='Field 3', defval=val_3_color_default)
int input_3_LineWidth = input.int(title='Style: Size', group='Field 3', minval=1, maxval=4, defval=2, step=1)
int input_3_LineTransparency = input.int(title='Style: Transparency', group='Field 3', minval=0, maxval=100, defval=0, step=5)
string input_3_LineStyle = input.string(title='Style: Type', group='Field 3', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 4
input_4_Timeframe = input.timeframe("", "Resolution:", group="Field 4")
input_4_Source = input(title='Source', group='Field 4', defval=close)
string input_4_MaType = input.string(title='Type', group='Field 4', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_4_MaLength = input.int(title='Length', group='Field 4', minval=1, maxval=1000, defval=1)
color input_4_color = input(title='Style: Color', group='Field 4', defval=val_4_color_default)
int input_4_LineWidth = input.int(title='Style: Size', group='Field 4', minval=1, maxval=4, defval=2, step=1)
int input_4_LineTransparency = input.int(title='Style: Transparency', group='Field 4', minval=0, maxval=100, defval=0, step=5)
string input_4_LineStyle = input.string(title='Style: Type', group='Field 4', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 5
input_5_Timeframe = input.timeframe("", "Resolution:", group="Field 5")
input_5_Source = input(title='Source', group='Field 5', defval=close)
string input_5_MaType = input.string(title='Type', group='Field 5', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_5_MaLength = input.int(title='Length', group='Field 5', minval=1, maxval=1000, defval=1)
color input_5_color = input(title='Style: Color', group='Field 5', defval=val_5_color_default)
int input_5_LineWidth = input.int(title='Style: Size', group='Field 5', minval=1, maxval=4, defval=2, step=1)
int input_5_LineTransparency = input.int(title='Style: Transparency', group='Field 5', minval=0, maxval=100, defval=0, step=5)
string input_5_LineStyle = input.string(title='Style: Type', group='Field 5', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 6
input_6_Timeframe = input.timeframe("", "Resolution:", group="Field 6")
input_6_Source = input(title='Source', group='Field 6', defval=close)
string input_6_MaType = input.string(title='Type', group='Field 6', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_6_MaLength = input.int(title='xLength', group='Field 6', minval=1, maxval=1000, defval=1)
color input_6_color = input(title='Style: Color', group='Field 6', defval=val_6_color_default)
int input_6_LineWidth = input.int(title='Style: Size', group='Field 6', minval=1, maxval=4, defval=2, step=1)
int input_6_LineTransparency = input.int(title='Style: Transparency', group='Field 6', minval=0, maxval=100, defval=0, step=5)
string input_6_LineStyle = input.string(title='Style: Type', group='Field 6', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 7
input_7_Timeframe = input.timeframe("", "Resolution:", group="Field 7")
input_7_Source = input(title='Source', group='Field 7', defval=close)
string input_7_MaType = input.string(title='Type', group='Field 7', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_7_MaLength = input.int(title='Length', group='Field 7', minval=1, maxval=1000, defval=1)
color input_7_color = input(title='Style: Color', group='Field 7', defval=val_7_color_default)
int input_7_LineWidth = input.int(title='Style: Size', group='Field 7', minval=1, maxval=4, defval=2, step=1)
int input_7_LineTransparency = input.int(title='Style: Transparency', group='Field 7', minval=0, maxval=100, defval=0, step=5)
string input_7_LineStyle = input.string(title='Style: Type', group='Field 7', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 8
input_8_Timeframe = input.timeframe("", "Resolution:", group="Field 8")
input_8_Source = input(title='Source', group='Field 8', defval=close)
string input_8_MaType = input.string(title='Type', group='Field 8', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_8_MaLength = input.int(title='Length', group='Field 8', minval=1, maxval=1000, defval=1)
color input_8_color = input(title='Style: Color', group='Field 8', defval=val_8_color_default)
int input_8_LineWidth = input.int(title='Style: Size', group='Field 8', minval=1, maxval=4, defval=2, step=1)
int input_8_LineTransparency = input.int(title='Style: Transparency', group='Field 8', minval=0, maxval=100, defval=0, step=5)
string input_8_LineStyle = input.string(title='Style: Type', group='Field 8', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 9
input_9_Timeframe = input.timeframe("", "Resolution:", group="Field 9")
input_9_Source = input(title='Source', group='Field 9', defval=close)
string input_9_MaType = input.string(title='Type', group='Field 9', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_9_MaLength = input.int(title='Length', group='Field 9', minval=1, maxval=1000, defval=1)
color input_9_color = input(title='Style: Color', group='Field 9', defval=val_9_color_default)
int input_9_LineWidth = input.int(title='Style: Size', group='Field 9', minval=1, maxval=4, defval=2, step=1)
int input_9_LineTransparency = input.int(title='Style: Transparency', group='Field 9', minval=0, maxval=100, defval=0, step=5)
string input_9_LineStyle = input.string(title='Style: Type', group='Field 9', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])

// Field 10
input_10_Timeframe = input.timeframe("", "Resolution:", group="Field 10")
input_10_Source = input(title='Source', group='Field 10', defval=close)
string input_10_MaType = input.string(title='Type', group='Field 10', defval='DISABLED', options=['DISABLED', 'COVWMA', 'DEMA', 'EMA', 'EHMA', 'FRAMA', 'HMA', 'KAMA', 'SMA', 'SMMA (RMA)', 'TEMA', 'VIDYA', 'VWMA', 'WMA'])
int input_10_MaLength = input.int(title='Length', group='Field 10', minval=1, maxval=1000, defval=1)
color input_10_color = input(title='Style: Color', group='Field 10', defval=val_10_color_default)
int input_10_LineWidth = input.int(title='Style: Size', group='Field 10', minval=1, maxval=4, defval=2, step=1)
int input_10_LineTransparency = input.int(title='Style: Transparency', group='Field 10', minval=0, maxval=100, defval=0, step=5)
string input_10_LineStyle = input.string(title='Style: Type', group='Field 10', defval='Line', options=['Line', 'Stepline', 'Step Line With Diamonds', 'Circles'])



//************  set final settings
[valFinal_1_MaType, valFinal_1_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_1_MaType, tpl_type2_1_MaType, tpl_type3_1_MaType, tpl_type4_1_MaType, tpl_type5_1_MaType, tpl_type6_1_MaType, tpl_type7_1_MaType, input_1_MaType, tpl_type1_1_MaLength, tpl_type2_1_MaLength, tpl_type3_1_MaLength, tpl_type4_1_MaLength, tpl_type5_1_MaLength, tpl_type6_1_MaLength, tpl_type7_1_MaLength, input_1_MaLength)
[valFinal_2_MaType, valFinal_2_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_2_MaType, tpl_type2_2_MaType, tpl_type3_2_MaType, tpl_type4_2_MaType, tpl_type5_2_MaType, tpl_type6_2_MaType, tpl_type7_2_MaType, input_2_MaType, tpl_type1_2_MaLength, tpl_type2_2_MaLength, tpl_type3_2_MaLength, tpl_type4_2_MaLength, tpl_type5_2_MaLength, tpl_type6_2_MaLength, tpl_type7_2_MaLength, input_2_MaLength)
[valFinal_3_MaType, valFinal_3_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_3_MaType, tpl_type2_3_MaType, tpl_type3_3_MaType, tpl_type4_3_MaType, tpl_type5_3_MaType, tpl_type6_3_MaType, tpl_type7_3_MaType, input_3_MaType, tpl_type1_3_MaLength, tpl_type2_3_MaLength, tpl_type3_3_MaLength, tpl_type4_3_MaLength, tpl_type5_3_MaLength, tpl_type6_3_MaLength, tpl_type7_3_MaLength, input_3_MaLength)
[valFinal_4_MaType, valFinal_4_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_4_MaType, tpl_type2_4_MaType, tpl_type3_4_MaType, tpl_type4_4_MaType, tpl_type5_4_MaType, tpl_type6_4_MaType, tpl_type7_4_MaType, input_4_MaType, tpl_type1_4_MaLength, tpl_type2_4_MaLength, tpl_type3_4_MaLength, tpl_type4_4_MaLength, tpl_type5_4_MaLength, tpl_type6_4_MaLength, tpl_type7_4_MaLength, input_4_MaLength)
[valFinal_5_MaType, valFinal_5_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_5_MaType, tpl_type2_5_MaType, tpl_type3_5_MaType, tpl_type4_5_MaType, tpl_type5_5_MaType, tpl_type6_5_MaType, tpl_type7_5_MaType, input_5_MaType, tpl_type1_5_MaLength, tpl_type2_5_MaLength, tpl_type3_5_MaLength, tpl_type4_5_MaLength, tpl_type5_5_MaLength, tpl_type6_5_MaLength, tpl_type7_5_MaLength, input_5_MaLength)
[valFinal_6_MaType, valFinal_6_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_6_MaType, tpl_type2_6_MaType, tpl_type3_6_MaType, tpl_type4_6_MaType, tpl_type5_6_MaType, tpl_type6_6_MaType, tpl_type7_6_MaType, input_6_MaType, tpl_type1_6_MaLength, tpl_type2_6_MaLength, tpl_type3_6_MaLength, tpl_type4_6_MaLength, tpl_type5_6_MaLength, tpl_type6_6_MaLength, tpl_type7_6_MaLength, input_6_MaLength)
[valFinal_7_MaType, valFinal_7_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_7_MaType, tpl_type2_7_MaType, tpl_type3_7_MaType, tpl_type4_7_MaType, tpl_type5_7_MaType, tpl_type6_7_MaType, tpl_type7_7_MaType, input_7_MaType, tpl_type1_7_MaLength, tpl_type2_7_MaLength, tpl_type3_7_MaLength, tpl_type4_7_MaLength, tpl_type5_7_MaLength, tpl_type6_7_MaLength, tpl_type7_7_MaLength, input_7_MaLength)
[valFinal_8_MaType, valFinal_8_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_8_MaType, tpl_type2_8_MaType, tpl_type3_8_MaType, tpl_type4_8_MaType, tpl_type5_8_MaType, tpl_type6_8_MaType, tpl_type7_8_MaType, input_8_MaType, tpl_type1_8_MaLength, tpl_type2_8_MaLength, tpl_type3_8_MaLength, tpl_type4_8_MaLength, tpl_type5_8_MaLength, tpl_type6_8_MaLength, tpl_type7_8_MaLength, input_8_MaLength)
[valFinal_9_MaType, valFinal_9_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_9_MaType, tpl_type2_9_MaType, tpl_type3_9_MaType, tpl_type4_9_MaType, tpl_type5_9_MaType, tpl_type6_9_MaType, tpl_type7_9_MaType, input_9_MaType, tpl_type1_9_MaLength, tpl_type2_9_MaLength, tpl_type3_9_MaLength, tpl_type4_9_MaLength, tpl_type5_9_MaLength, tpl_type6_9_MaLength, tpl_type7_9_MaLength, input_9_MaLength)
[valFinal_10_MaType, valFinal_10_MaLength] = _funcSetFinalVal(inputTemplate, tpl_type1_10_MaType, tpl_type2_10_MaType, tpl_type3_10_MaType, tpl_type4_10_MaType, tpl_type5_10_MaType, tpl_type6_10_MaType, tpl_type7_10_MaType, input_10_MaType, tpl_type1_10_MaLength, tpl_type2_10_MaLength, tpl_type3_10_MaLength, tpl_type4_10_MaLength, tpl_type5_10_MaLength, tpl_type6_10_MaLength, tpl_type7_10_MaLength, input_10_MaLength)



//************  Plotting

// Lines
plot(_funcCalcMA(valFinal_1_MaType, input_1_Source, input_1_Timeframe, valFinal_1_MaLength), title='MA 1', color=color.new(input_1_color, input_1_LineTransparency), linewidth=input_1_LineWidth, style=_funcLineStyle(input_1_LineStyle))
plot(_funcCalcMA(valFinal_2_MaType, input_2_Source, input_2_Timeframe, valFinal_2_MaLength), title='MA 2', color=color.new(input_2_color, input_2_LineTransparency), linewidth=input_2_LineWidth, style=_funcLineStyle(input_2_LineStyle))
plot(_funcCalcMA(valFinal_3_MaType, input_3_Source, input_3_Timeframe, valFinal_3_MaLength), title='MA 3', color=color.new(input_3_color, input_3_LineTransparency), linewidth=input_3_LineWidth, style=_funcLineStyle(input_3_LineStyle))
plot(_funcCalcMA(valFinal_4_MaType, input_4_Source, input_4_Timeframe, valFinal_4_MaLength), title='MA 4', color=color.new(input_4_color, input_4_LineTransparency), linewidth=input_4_LineWidth, style=_funcLineStyle(input_4_LineStyle))
plot(_funcCalcMA(valFinal_5_MaType, input_5_Source, input_5_Timeframe, valFinal_5_MaLength), title='MA 5', color=color.new(input_5_color, input_5_LineTransparency), linewidth=input_5_LineWidth, style=_funcLineStyle(input_5_LineStyle))
plot(_funcCalcMA(valFinal_6_MaType, input_6_Source, input_6_Timeframe, valFinal_6_MaLength), title='MA 6', color=color.new(input_6_color, input_6_LineTransparency), linewidth=input_6_LineWidth, style=_funcLineStyle(input_6_LineStyle))
plot(_funcCalcMA(valFinal_7_MaType, input_7_Source, input_7_Timeframe, valFinal_7_MaLength), title='MA 7', color=color.new(input_7_color, input_7_LineTransparency), linewidth=input_7_LineWidth, style=_funcLineStyle(input_7_LineStyle))
plot(_funcCalcMA(valFinal_8_MaType, input_8_Source, input_8_Timeframe, valFinal_8_MaLength), title='MA 8', color=color.new(input_8_color, input_8_LineTransparency), linewidth=input_8_LineWidth, style=_funcLineStyle(input_8_LineStyle))
plot(_funcCalcMA(valFinal_9_MaType, input_9_Source, input_9_Timeframe, valFinal_9_MaLength), title='MA 9', color=color.new(input_9_color, input_9_LineTransparency), linewidth=input_9_LineWidth, style=_funcLineStyle(input_9_LineStyle))
plot(_funcCalcMA(valFinal_10_MaType, input_10_Source, input_10_Timeframe, valFinal_10_MaLength), title='MA 10', color=color.new(input_10_color, input_10_LineTransparency), linewidth=input_10_LineWidth, style=_funcLineStyle(input_10_LineStyle))
